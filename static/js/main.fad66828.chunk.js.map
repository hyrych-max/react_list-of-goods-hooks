{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","sortField","setSortField","isReverseOrder","setIsReverseOrder","visibleGoods","goods","preparedGoods","sort","good1","good2","ABC","localeCompare","Length","length","reverse","getPreparedGoods","className","type","cn","onClick","Reset","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,yBAAAA,E,wBAAAA,E,eAAAA,M,KAiCE,IAAME,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA4CF,oBAAS,GAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KAEMC,EA1BR,SACEC,EADF,GAGG,IADCL,EACF,EADEA,UAAWE,EACb,EADaA,eAEPI,EAAa,YAAOD,GAe1B,OAbAC,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKJ,EAASc,IACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKb,EAASgB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAILX,EAAiCI,EAAcQ,UAA9BR,EAOJS,CACnBlB,EACA,CAAEG,YAAWE,mBAYf,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,CACZ,WAAYlB,IAAcJ,EAASc,KAClC,kBACHS,QAAS,kBAAMlB,EAAaL,EAASc,MALvC,iCAUA,wBACEO,KAAK,SACLD,UAAWE,IAAG,CACZ,WAAYlB,IAAcJ,EAASgB,QAClC,qBACHO,QAAS,kBAAMlB,EAAaL,EAASgB,SALvC,4BAUA,wBACEK,KAAK,SACLD,UAAWE,IAAG,CACZ,YAAahB,GACZ,qBACHiB,QArCR,WACEhB,GAAmBD,IA+Bf,sBAUEF,GAAaE,IACb,wBACEe,KAAK,SACLD,UAAWE,IAAG,CACZ,WAAYlB,IAAcJ,EAASwB,OAClC,oBACHD,QA5CV,WACElB,EAAa,IACbE,GAAkB,IAqCZ,sBAaJ,6BACGC,EAAaiB,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YCtHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.fad66828.chunk.js","sourcesContent":["import { useState } from 'react';\nimport cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  ABC = 'Sort alphabeticaly',\n  Length = 'Sort by length',\n  Reset = 'reset',\n}\n\ninterface SortField {\n  sortField: string | '';\n  isReverseOrder: boolean;\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  { sortField, isReverseOrder }: SortField,\n) {\n  const preparedGoods = [...goods];\n\n  preparedGoods.sort((good1, good2) => {\n    switch (sortField) {\n      case SortType.ABC:\n        return good1.localeCompare(good2);\n\n      case SortType.Length:\n        return good1.length - good2.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  return !isReverseOrder ? preparedGoods : preparedGoods.reverse();\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReverseOrder, setIsReverseOrder] = useState(false);\n\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    { sortField, isReverseOrder },\n  );\n\n  function toggleReverse() {\n    setIsReverseOrder(!isReverseOrder);\n  }\n\n  function toggleReset() {\n    setSortField('');\n    setIsReverseOrder(false);\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn({\n            'is-light': sortField !== SortType.ABC,\n          }, 'button is-info')}\n          onClick={() => setSortField(SortType.ABC)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn({\n            'is-light': sortField !== SortType.Length,\n          }, 'button is-success')}\n          onClick={() => setSortField(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn({\n            'is-light': !isReverseOrder,\n          }, 'button is-warning')}\n          onClick={toggleReverse}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReverseOrder) && (\n          <button\n            type=\"button\"\n            className={cn({\n              'is-light': sortField !== SortType.Reset,\n            }, 'button is-danger')}\n            onClick={toggleReset}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}